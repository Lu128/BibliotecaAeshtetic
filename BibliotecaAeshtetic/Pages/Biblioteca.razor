@page "/Tabla1"

@using System.Net.Http.Json
@using BibliotecaAeshtetic.Data
@using MudBlazor.Examples.Data.Models
@inject HttpClient _client;

<MudButton OnClick="(args)=>AgregarNuevoRegistro()" Variant="Variant.Filled" Color="Color.Secondary" >Añadir</MudButton>

<MudDataGrid T="Libro" Items="@Libros" ReadOnly="@_readOnly" EditMode="@(_isCellEditMode ? DataGridEditMode.Cell : DataGridEditMode.Form)"
    StartedEditingItem="@StartedEditingItem" CancelledEditingItem="@CancelledEditingItem" CommittedItemChanges="@CommittedItemChanges"
    Bordered="true" Dense="true" EditTrigger="@(_editTriggerRowClick ? DataGridEditTrigger.OnRowClick : DataGridEditTrigger.Manual)">
    <Columns>
        <Column T="Libro" Field="idLibro" Title="ID"/>
        <Column T="Libro" Field="titulo" Title="Título"/>
        <Column T="Libro" Field="editorial" Title="Editorial"/>
        <Column T="Libro" Field="autor"Title="Autor"/>
        <Column T="Libro" Field="pagina"Title="Páginas"/>
        <Column T="Libro" Field="descripcion" Title="Descripción"/>
        <Column T="Libro" Hidden="@(_isCellEditMode || _readOnly || _editTriggerRowClick)" CellClass="d-flex justify-end">
            <CellTemplate>
                <MudIconButton Size="@Size.Small" Icon="@Icons.Outlined.Edit" OnClick="@context.Actions.StartEditingItem" />
                <MudIconButton Size="@Size.Small" Icon="@Icons.Filled.Delete" OnClick="(args)=> EliminarEvento(context.Item)" />
            </CellTemplate>
        </Column>
    </Columns>
</MudDataGrid>

@code {
    private IEnumerable<Libro> Libros = new List<Libro>();
    private bool _readOnly;
    private bool _isCellEditMode;
    private List<string> _events = new();
    private bool _editTriggerRowClick;

    [Inject] private ISnackbar SnackBarService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var Libroo = new List<Libro>();
        _client.BaseAddress = new("https://localhost:7174/");

        var requestMessage = new HttpRequestMessage(HttpMethod.Get, "Biblioteca/ConsultaLibros");
        var respuesta = await _client.SendAsync(requestMessage);

        if(respuesta.StatusCode == System.Net.HttpStatusCode.OK)
        {
            var responseBody = await respuesta.Content.ReadAsStringAsync();
            var listasLibro = System.Text.Json.JsonSerializer.Deserialize<List<Libro>>(responseBody);
            Libros = listasLibro;
        }

        Libros = Libroo;

    }

    void EliminarEvento(Libro item)
    {
        SnackBarService.Add("Eliminado ._.", Severity.Warning);
        ((List<Libro>)Libros).Remove(item);
    }

    void AgregarNuevoRegistro()
    {
        SnackBarService.Add("Añadido :o", Severity.Success);
        var Libroo = new Libro
            {
                titulo = "Nuevo Registro"
            };
            ((List<Libro>)Libros).Add(Libroo);
            StateHasChanged();
    }

    // events
    void StartedEditingItem(Libro item)
    {
        _events.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CancelledEditingItem(Libro item)
    {
        _events.Insert(0, $"Event = CancelledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CommittedItemChanges(Libro item)
    {
        _events.Insert(0, $"Event = CommittedItemChanges, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }



}